stages:
  - build
  - deploy
  - production
  
variables:
  VERSION: "RC"  
  TAG: ${VERSION}-${CI_PIPELINE_ID}
  APPLICATION_NAME: "${CI_PROJECT_NAME}-${TAG}"
  IMAGE: "${CI_REGISTRY_NAMESPACE}/${CI_PROJECT_NAME}"
  IMAGE_FINAL_TAG: "${IMAGE}:${TAG}"
  IMAGE_FINAL_TAG_LATEST: "${IMAGE}:latest"
  CONTAINER_PORT: "8080"
  PROJECT_PATH_JAR: "application"
  PROJECT_PATH_COMPOSE: "/home/${CI_REGISTRY_USER}"
  
maven_build:
  stage: build
  image: maven:3.6.3-jdk-11
  variables:
    MAVEN_OPTS: "-Dmaven.wagon.http.ssl.insecure=true"
  before_script:
    - mvn clean install -pl domain,infrastructure,usecase,application -s settings.xml
  script:
    - mv ${PROJECT_PATH_JAR}/target/${PROJECT_PATH_JAR}.jar ${PROJECT_PATH_JAR}/target/${APPLICATION_NAME}.jar
  after_script:
  - mv ${PROJECT_PATH_JAR}/target/${PROJECT_PATH_JAR}.war ${PROJECT_PATH_JAR}/target/${CI_PROJECT_NAME}.war
  - rm -rvf /usr/local/repository/br/com/fachesf/war/${CI_PROJECT_NAME}.war
  - cp ${PROJECT_PATH_JAR}/target/${CI_PROJECT_NAME}.war /usr/local/repository/br/com/fachesf/war/
  artifacts:
    paths:
    - ${PROJECT_PATH_JAR}/target/${APPLICATION_NAME}.jar
  only:
  - quality

docker_build:
  stage: deploy
  image: docker:latest
  variables: 
   DOCKER_DRIVER: overlay2
   FF_NETWORK_PER_BUILD: "true"
  before_script:
  - docker login ${CI_REGISTRY} --username=${CI_REGISTRY_USER} --password=${CI_REGISTRY_PASSWORD}    
  script:
  - docker build --build-arg DEPLOY_NAME_TEMP=${APPLICATION_NAME} --build-arg DEPLOY_NAME_FINAL=${CI_PROJECT_NAME} --build-arg PROJECT_PATH_JAR=${PROJECT_PATH_JAR} -t ${IMAGE_FINAL_TAG} .
  - docker push ${IMAGE_FINAL_TAG}    
  - docker tag  ${IMAGE_FINAL_TAG} ${IMAGE_FINAL_TAG_LATEST}
  - docker push ${IMAGE_FINAL_TAG_LATEST}
  after_script:
  - docker buildx prune --all --force
  - |
    echo "version: '3.9'" > docker-compose.yml
    echo "services: " >> docker-compose.yml
    echo "  ${CI_PROJECT_NAME}: " >> docker-compose.yml
    echo "    image: ${IMAGE_FINAL_TAG}" >> docker-compose.yml
    echo "    command: java -jar /app/${CI_PROJECT_NAME}.jar" >> docker-compose.yml
    echo "    container_name: ${APPLICATION_NAME}" >> docker-compose.yml
    echo "    hostname: docker-qa" >> docker-compose.yml
    echo "    deploy:" >> docker-compose.yml
    echo "      resources:" >> docker-compose.yml
    echo "        limits:" >> docker-compose.yml
    echo "          memory: 1G" >> docker-compose.yml
    echo "    ports:" >> docker-compose.yml
    echo "      - '${CONTAINER_PORT}'" >> docker-compose.yml
    echo "    dns:" >> docker-compose.yml
    echo "      - 192.168.0.111" >> docker-compose.yml
    echo "      - 192.168.0.11" >> docker-compose.yml
    echo "    dns_search:" >> docker-compose.yml
    echo "      - fachesf.com.br" >> docker-compose.yml
    echo "    networks:" >> docker-compose.yml
    echo "      - default" >> docker-compose.yml
    echo "    volumes:" >> docker-compose.yml
    echo "      - /etc/fachesf:/etc/fachesf" >> docker-compose.yml
    echo "      - /etc/resolv.conf.docker:/etc/resolv.conf" >> docker-compose.yml
    echo "    restart: unless-stopped" >> docker-compose.yml
    echo "    labels:" >> docker-compose.yml
    echo "      - 'traefik.enable=true'" >> docker-compose.yml
    echo "      - 'traefik.http.routers.${CI_PROJECT_NAME}.rule=Host(\`${CI_QA_SERVER_ADDRESS}\`) && PathPrefix(\`/${CI_PROJECT_NAME}\`)'" >> docker-compose.yml
    echo "networks:" >> docker-compose.yml
    echo "  default:" >> docker-compose.yml 
    echo "    name: webapi" >> docker-compose.yml
  - scp docker-compose.yml ${CI_REGISTRY_USER}@${CI_QA_SERVER_ADDRESS}:${PROJECT_PATH_COMPOSE}/
  - ssh ${CI_REGISTRY_USER}@${CI_QA_SERVER_ADDRESS} 'docker-compose stop "${CI_PROJECT_NAME}" 2>/dev/null || true' 
  - ssh ${CI_REGISTRY_USER}@${CI_QA_SERVER_ADDRESS} 'docker-compose rm -f "${CI_PROJECT_NAME}" 2>/dev/null || true' 
  - ssh ${CI_REGISTRY_USER}@${CI_QA_SERVER_ADDRESS} 'cd ${PROJECT_PATH_COMPOSE} && docker-compose up -d'
  dependencies:
  - maven_build
  only:
  - quality

docker_production:
  stage: production
  script:
  - |
    echo "version: '3.9'" > docker-compose.yml
    echo "services: " >> docker-compose.yml
    echo "  ${CI_PROJECT_NAME}: " >> docker-compose.yml
    echo "    image: ${IMAGE_FINAL_TAG_LATEST}" >> docker-compose.yml
    echo "    command: java -jar /app/${CI_PROJECT_NAME}.jar" >> docker-compose.yml
    echo "    container_name: ${CI_PROJECT_NAME}" >> docker-compose.yml
    echo "    hostname: docker-prd" >> docker-compose.yml
    echo "    deploy:" >> docker-compose.yml
    echo "      resources:" >> docker-compose.yml
    echo "        limits:" >> docker-compose.yml
    echo "          memory: 1G" >> docker-compose.yml
    echo "    ports:" >> docker-compose.yml
    echo "      - '${CONTAINER_PORT}'" >> docker-compose.yml
    echo "    dns:" >> docker-compose.yml
    echo "      - 192.168.0.111" >> docker-compose.yml
    echo "      - 192.168.0.11" >> docker-compose.yml
    echo "    dns_search:" >> docker-compose.yml
    echo "      - fachesf.com.br" >> docker-compose.yml
    echo "    networks:" >> docker-compose.yml
    echo "      - default" >> docker-compose.yml
    echo "    volumes:" >> docker-compose.yml
    echo "      - /etc/fachesf:/etc/fachesf" >> docker-compose.yml
    echo "      - /etc/resolv.conf.docker:/etc/resolv.conf" >> docker-compose.yml
    echo "    restart: unless-stopped" >> docker-compose.yml
    echo "    labels:" >> docker-compose.yml
    echo "      - 'traefik.enable=true'" >> docker-compose.yml
    echo "      - 'traefik.http.routers.${CI_PROJECT_NAME}.rule=Host(\`${CI_PRD_SERVER_ADDRESS}\`) && PathPrefix(\`/${CI_PROJECT_NAME}\`)'" >> docker-compose.yml
    echo "networks:" >> docker-compose.yml
    echo "  default:" >> docker-compose.yml 
    echo "    name: webapi" >> docker-compose.yml
  - scp docker-compose.yml ${CI_REGISTRY_USER}@${CI_PRD_SERVER_ADDRESS}:${PROJECT_PATH_COMPOSE}/
  - ssh ${CI_REGISTRY_USER}@${CI_PRD_SERVER_ADDRESS} 'docker-compose stop "${CI_PROJECT_NAME}" 2>/dev/null || true' 
  - ssh ${CI_REGISTRY_USER}@${CI_PRD_SERVER_ADDRESS} 'docker-compose rm -f "${CI_PROJECT_NAME}" 2>/dev/null || true' 
  - ssh ${CI_REGISTRY_USER}@${CI_PRD_SERVER_ADDRESS} 'cd ${PROJECT_PATH_COMPOSE} && docker-compose up -d'
  only:
  - main
